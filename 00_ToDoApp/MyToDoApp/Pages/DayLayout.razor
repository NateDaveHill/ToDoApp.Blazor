@page "/daily"
@using MyToDoAppMudBlazor.Shared

@inject IDialogService DialogService

<MudGrid>
    <MudItem xs="10">
        <h3>Add New ToDo</h3>
        <br/>
        <MudFab @onclick="OpenDialog" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add"/>
        <br/>
    </MudItem>
    <MudItem xs="2">
        <h3>Remove All ToDos</h3>
        <br/>
        <MudFab class="" Size="Size.Large" @onclick="DeleteAllToDos"
                Color="Color.Error" StartIcon="@Icons.Material.Filled.Remove"/>
        <br/>
    </MudItem>
    <MudItem xs="12">
        <MudGrid>
            @foreach (var toDo in ToDos)
            {
                <MudItem xs="6" sm="3">
                    <br/>
                    <MudPaper Height="100%" Width="100%" Elevation="3" 
                              Style="@($"color:{Theme.Palette.Dark}; background:{Theme.Palette.Warning}; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;")" 
                              Class="p-4" Outlined="true">
                        <MudGrid>
                            <MudItem xs="12">
                                <MudCheckBox @bind-Checked="@toDo.IsDone" T="bool" Color="Color.Primary">
                                    ToDo: @toDo.Title
                                    <br/>
                                    Comment: @toDo.Comment
                                </MudCheckBox>
                            </MudItem>
                            <MudItem xs="3"/>
                            <MudItem xs="3"/>
                            <MudItem xs="3">
                                <MudButton class="md-fab md-fab-bottom-right" aria-label="Remove A ToDo"
                                           @onclick="args => DeleteToDo(args, toDo.Id)">
                                    <md-icon>Remove</md-icon>
                                </MudButton>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                    <br/>
                </MudItem>
            }
        </MudGrid>
    </MudItem>
</MudGrid>


@code {

    private readonly MudTheme Theme = new();

    MudDialogInstance MudDialog;
    public List<ToDos> ToDosOfDay;
    readonly ToDos TempToDos = new();
    public List<ToDos>? ToDos;
    private DialogResult? result;

    protected override void OnInitialized()
    {
        using (var context = new MyDbContext())
        {
            context.Database.EnsureCreated();
            ToDos = context.ToDos.Select(x => x).ToList();
            Refresh();
        }
    }


    private async Task OpenDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true };
        var dialog = DialogService.Show<AddNewToDoDialog>("Add new To Do", options);
        result = await dialog.Result;
        if (result.Cancelled.Equals(true))
        {
            dialog.Close();
        }
        else
        {
            dialog.Close();
            Refresh();

        }
    }

    private void DeleteToDo(MouseEventArgs e, int toDoId)
    {
        using (var context = new MyDbContext())
        {
            var deleteToDo = context.ToDos.Where(x => x.Id == toDoId).First();
            context.Remove(deleteToDo);
            context.SaveChanges();
            Refresh();
        }
    }

    private void DeleteAllToDos()
    {
        using (var context = new MyDbContext())
        {
            var allToDos = context.ToDos.Select(x => x).ToList();
            foreach (var todo in allToDos)
            {
                context.ToDos.Remove(todo);
            }
            context.SaveChanges();
            Refresh();
        }
    }

    private void Refresh()
    {
        using (var context = new MyDbContext())
        {
            ToDos = context.ToDos.Select(x => x).ToList();

    //NavMenu navMenu = new();
    //foreach (var day in navMenu.daysToDo)
    //{
    //    ToDosOfDay = ToDos.Where(x => x.Created.DayOfWeek.ToString() == day).ToList();
    //}
        }
    }

}